---
title: "GAM of MedSea variables to model chlorophyll-a"
author: "Simon Oiry"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(lubridate)
library(brms)
library(purrr)
library(dplyr)
library(Utilities.Package)
```


```{r Open Chlorophyll}

# Read in
df_chla <- read.csv("Data/Variables_values/Monthly_Chl_boxes.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  pivot_longer(-Date, names_to = "metric", values_to = "values") %>% 
  mutate(Box = gsub(".*_","",metric),
         Metric = case_when(str_detect(metric,"GEOM") ~ "GeoMean_Chla",
                            T ~ "STD_Chla")) %>% 
  select(-metric) %>% 
  pivot_wider(names_from = Metric, values_from = values) %>% 
  mutate(Box = case_when(Box == "Adriatico" ~ "Adriatic",
                         Box == "Chipre" ~ "Cyprus",
                         T ~ "Lyon"))

df_chla

```

```{r Open HF}

df_HF_Adriatic <- read.csv("Data/Variables_values/Monthly_HF_Adriatic.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Adriatic")

df_HF_Lyon <- read.csv("Data/Variables_values/Monthly_HF_Lyon.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Lyon")

df_HF_Chipre <- read.csv("Data/Variables_values/Monthly_HF_Cyprus.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Cyprus")

df_HF <- rbind(df_HF_Adriatic,df_HF_Lyon,df_HF_Chipre)

rm(df_HF_Adriatic)
rm(df_HF_Lyon)
rm(df_HF_Chipre)


```

```{r Open MLD}

df_MLD_Adriatic <- read.csv("Data/Variables_values/Monthly_MLD_Adriatic.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Adriatic")

df_MLD_Lyon <- read.csv("Data/Variables_values/Monthly_MLD_Lyon.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Lyon")

df_MLD_Chipre <- read.csv("Data/Variables_values/Monthly_MLD_Cyprus.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Cyprus")

df_MLD <- rbind(df_MLD_Adriatic,df_MLD_Lyon,df_MLD_Chipre)

rm(df_MLD_Adriatic)
rm(df_MLD_Lyon)
rm(df_MLD_Chipre)

```

```{r Open NH4}

df_NH4_Adriatic <- read.csv("Data/Variables_values/Monthly_NH4_Adriatic_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Adriatic")

df_NH4_Lyon <- read.csv("Data/Variables_values/Monthly_NH4_Lyon_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Lyon")

df_NH4_Chipre <- read.csv("Data/Variables_values/Monthly_NH4_Cyprus_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Cyprus")

df_NH4 <- rbind(df_NH4_Adriatic,df_NH4_Lyon,df_NH4_Chipre)

rm(df_NH4_Adriatic)
rm(df_NH4_Lyon)
rm(df_NH4_Chipre)

```

```{r Open NO3}

df_NO3_Adriatic <- read.csv("Data/Variables_values/Monthly_NO3_Adriatic_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Adriatic")

df_NO3_Lyon <- read.csv("Data/Variables_values/Monthly_NO3_Lyon_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Lyon")

df_NO3_Chipre <- read.csv("Data/Variables_values/Monthly_NO3_Cyprus_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Cyprus")

df_NO3 <- rbind(df_NO3_Adriatic,df_NO3_Lyon,df_NO3_Chipre)

rm(df_NO3_Adriatic)
rm(df_NO3_Lyon)
rm(df_NO3_Chipre)

```

```{r Open PO4}

df_PO4_Adriatic <- read.csv("Data/Variables_values/Monthly_PO4_Adriatic_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Adriatic")

df_PO4_Lyon <- read.csv("Data/Variables_values/Monthly_PO4_Lyon_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Lyon")

df_PO4_Chipre <- read.csv("Data/Variables_values/Monthly_PO4_Cyprus_for_MLD.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Cyprus")

df_PO4 <- rbind(df_PO4_Adriatic,df_PO4_Lyon,df_PO4_Chipre)

rm(df_PO4_Adriatic)
rm(df_PO4_Lyon)
rm(df_PO4_Chipre)

```

```{r Open SSS}

df_SSS_Adriatic <- read.csv("Data/Variables_values/Monthly_SSS_Adriatic.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Adriatic")

df_SSS_Lyon <- read.csv("Data/Variables_values/Monthly_SSS_Lyon.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Lyon")

df_SSS_Chipre <- read.csv("Data/Variables_values/Monthly_SSS_Cyprus.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  mutate(Box = "Cyprus")

df_SSS <- rbind(df_SSS_Adriatic,df_SSS_Lyon,df_SSS_Chipre)

rm(df_SSS_Adriatic)
rm(df_SSS_Lyon)
rm(df_SSS_Chipre)

```

```{r Open SST}


df_SST <- read.csv("Data/Variables_values/Monthly_SST_boxes.csv", stringsAsFactors = FALSE) %>% 
  mutate(Date = dmy(Date)) %>% 
  as_tibble() %>% 
  pivot_longer(-Date, names_to = "metric", values_to = "values") %>% 
  mutate(Box = gsub(".*_","",metric),
         Metric = "SST") %>% 
  select(-metric) %>% 
  pivot_wider(names_from = Metric, values_from = values) %>% 
  mutate(Box = case_when(Box == "Adriatico" ~ "Adriatic",
                         Box == "Chipre" ~ "Cyprus",
                         T ~ "Lyon"))
```

```{r stack all}

date_min <- dmy("01-01-2018")
date_max <- dmy("01-01-2021")

df_chla <- df_chla %>% 
  dplyr::filter(Date >= min(df_HF$Date), 
                Date <= max(df_HF$Date))

df <- df_chla %>%
  left_join(df_SST,  by = c("Box", "Date")) %>%
  left_join(df_SSS,  by = c("Box", "Date")) %>%
  left_join(df_PO4,  by = c("Box", "Date")) %>%
  left_join(df_NO3,  by = c("Box", "Date")) %>%
  left_join(df_NH4,  by = c("Box", "Date")) %>%
  left_join(df_MLD,  by = c("Box", "Date")) %>%
  left_join(df_HF,   by = c("Box", "Date")) %>% 
  pivot_longer(-c(Date,Box), names_to = "Metric", values_to = "Value")


write.csv(df,"Data/df.all.csv", row.names = F)

df %>% 
  dplyr::filter(Date >= date_min, 
                Date <= date_max) %>% 
  ggplot(aes(x = Date, y = Value, color = Box, group = Box))+
  geom_point()+
  geom_line()+
  # geom_smooth(method = "gam")+
  facet_wrap(~Metric,scales = "free")+
  theme_bw()

df_wide <- df %>% 
  pivot_wider(names_from = Metric,values_from = Value)

```

```{r Interaction by boxes}
# Fit a GAM where each smooth is allowed to vary by Box
fit <- brm(
  formula = GeoMean_Chla ~ 
    s(SST, by = Box) + s(SSS, by = Box) + s(PO4, by = Box) +
    s(NO3, by = Box) + s(NH4, by = Box) + s(MLD, by = Box) +
    s(HF, by = Box) + (1 | Box),
  data = df_wide,
  family = gaussian(),
  chains = 4, cores = 16
)

summary(fit)

smooths <- conditional_smooths(fit)
lapply(smooths, names)



all_smooths <- map_dfr(
  names(smooths),
  function(name) {
    df <- smooths[[name]]
    x_var <- setdiff(names(df), c("estimate__", "se__", "lower__", "upper__", "cond__"))
    df <- df %>% rename(x = all_of(x_var))
    df$variable <- name
    df
  },
  .id = "id"
)

smooths_by_var <- split(all_smooths, all_smooths$variable)

# Create a plot for each variable
plots <- lapply(names(smooths_by_var), function(varname) {
  df <- smooths_by_var[[varname]]
  
  ggplot(df, aes(x = x1, y = estimate__)) +
    geom_line() +
    geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
    facet_wrap(~ cond__, scales = "free_x") +
    labs(
      title = paste("Effect of", varname, "on Chla"),
      x = varname,
      y = "Estimated Effect on Chla"
    )+
    theme_Bede()
})

for (p in plots) print(p)


```

```{r Interaction by boxes STD}

df_wide_std <- df_wide %>%
  mutate(across(c(SST, SSS, PO4, NO3, NH4, MLD, HF), 
                ~ scale(.)[, 1], 
                .names = "{.col}_z"))

fit <- brm(
  formula = GeoMean_Chla + 1 ~ 
    s(SST_z, by = Box) + s(SSS_z, by = Box) + s(PO4_z, by = Box) +
    s(NO3_z, by = Box) + s(NH4_z, by = Box) + s(MLD_z, by = Box) +
    s(HF_z, by = Box) + (1 | Box),
  data = df_wide_std,
  family = Gamma(link = "log"),
  chains = 4, cores = 16,
  iter = 1000,
  warmup = 100,
  file = "Data/Model/Chla_GAM_all_STD_1000_plus1"
    
)

summary(fit)
plot(fit)

# Extract conditional smooths
smooths <- conditional_smooths(fit)

# Retrieve scaling parameters for inverse transform
scaling_info <- df_wide %>%
  summarize(across(c(SST, SSS, PO4, NO3, NH4, MLD, HF),
                   list(mean = mean, sd = sd), na.rm = TRUE))

#  Convert smooths back to native x-axis scale
all_smooths <- map_dfr(
  names(smooths),
  function(name) {
    df <- smooths[[name]]
    x_var <- setdiff(names(df), c("estimate__", "se__", "lower__", "upper__", "cond__"))
    df <- df %>% rename(x = all_of(x_var))
    df$variable <- name
    df
  },
  .id = "id"
)

all_smooths_native <- all_smooths %>%
  mutate(raw_x = dplyr::case_when(
    variable == "mu: s(SST_z,by=Box)" ~ x1 * as.numeric(scaling_info$SST_sd) + as.numeric(scaling_info$SST_mean),
    variable == "mu:s(SSS_z,by=Box)" ~ x1 * as.numeric(scaling_info$SSS_sd) + as.numeric(scaling_info$SSS_mean),
    variable == "mu:s(PO4_z,by=Box)" ~ x1 * as.numeric(scaling_info$PO4_sd) + as.numeric(scaling_info$PO4_mean),
    variable == "mu:s(NO3_z,by=Box)" ~ x1 * as.numeric(scaling_info$NO3_sd) + as.numeric(scaling_info$NO3_mean),
    variable == "mu:s(NH4_z,by=Box)" ~ x1 * as.numeric(scaling_info$NH4_sd) + as.numeric(scaling_info$NH4_mean),
    variable == "mu:s(MLD_z,by=Box)" ~ x1 * as.numeric(scaling_info$MLD_sd) + as.numeric(scaling_info$MLD_mean),
    variable == "mu:s(HF_z,by=Box)"  ~ x1 * as.numeric(scaling_info$HF_sd)  + as.numeric(scaling_info$HF_mean),
    TRUE ~ NA_real_
  ))

# Split and plot
smooths_by_var_native <- split(all_smooths_native, all_smooths_native$variable) %>% 
  as_tibble()

plots <- lapply(names(smooths_by_var_native), function(varname) {
  df <- smooths_by_var_native[[varname]]
  ggplot(df, aes(x = raw_x, y = estimate__)) +
    geom_line() +
    geom_ribbon(aes(ymin = lower__, ymax = upper__), alpha = 0.2) +
    facet_wrap(~ cond__, scales = "free_x") +
    labs(
      title = paste("Effect of", varname, "on Chla"),
      x = varname,
      y = "Estimated Effect on Chla"
    ) +
    theme_minimal()
})

# Display all plots
for (p in plots) print(p)
```


```{r Pred all}

preds_all <- fitted(
  fit,
  newdata    = df_wide,
  re_formula = NULL,    # include Box intercept
  probs      = c(0.025, 0.975)
)

plotdat_all <- bind_cols(df_wide, as_tibble(preds_all))

# 3c. Plot: obs ± SE, plus GAM fit ±95% ribbon, faceted by Box
ggplot() +
  geom_errorbar(
    data = df_wide,
    aes(x = Date,
        ymin = GeoMean_Chla - SE_Chla,
        ymax = GeoMean_Chla + SE_Chla),
    width = 0.1, alpha = 0.4
  ) +
  geom_point(
    data = df_wide,
    aes(x = Date, y = GeoMean_Chla),
    size = 1, alpha = 0.6
  ) +
  geom_line(
    data = plotdat_all,
    aes(x = Date, y = Estimate),
    size = 1
  ) +
  geom_ribbon(
    data = plotdat_all,
    aes(x = Date, ymin = Q2.5, ymax = Q97.5),
    alpha = 0.2
  ) +
  facet_wrap(~ Box, scale = "free") +
  labs(
    x = "Date",
    y = "Chlorophyll-a (GeoMean)",
    title = "Bayesian GAM: Chla ~ Date by Box",
    subtitle = "Points ± SE = obs; line + ribbon = posterior mean ±95% CI"
  ) +
  theme_minimal()

```












